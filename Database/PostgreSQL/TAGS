
./Simple/Types.hs,360
module Database.MySQL.Simple.Types12,13
data Null =31,32
data Null = Null31,32
instance Eq34,35
newtype Query =57,58
newtype Query = Query {57,58
      fromQuery ::58,59
newtype Only a88,89
newtype Only a = Only {88,89
      fromOnly ::89,90
newtype In a99,100
newtype In a = In a99,100
newtype Binary a103,104
newtype Binary a = Binary a103,104

./Simple/QueryParams.hs,126
module Database.MySQL.Simple.QueryParams14,15
class QueryParams a27,28
    renderParams ::28,29
instance QueryParams31,32

./Simple/Result.hs,1533
module Database.MySQL.Simple.Result20,21
data ResultError =53,54
data ResultError = Incompatible {53,54
data ResultError = Incompatible { errSQLType ::53,54
                                , errHaskellType ::54,55
                                , errMessage ::55,56
                 | UnexpectedNull {57,58
                 | UnexpectedNull { errSQLType ::57,58
                                  , errHaskellType ::58,59
                                  , errMessage ::59,60
                 | ConversionFailed {62,63
                 | ConversionFailed { errSQLType ::62,63
                                    , errHaskellType ::63,64
                                    , errMessage ::64,65
class Result a74,75
    convert ::75,76
instance (Result80,81
isText ::178,179
isText f179,180
newtype Compat =181,182
newtype Compat = Compat Word32181,182
mkCompats ::183,184
mkCompats =184,185
mkCompat ::187,188
mkCompat =188,189
compat ::190,191
compat (Compat191,192
okText, ok8, ok16, ok32, ok64, okWord :: Compat193,194
okText, ok8, ok16, ok32, ok64, okWord :: Compat193,194
okText, ok8, ok16, ok32, ok64, okWord :: Compat193,194
okText, ok8, ok16, ok32, ok64, okWord193,194
okText, ok8, ok16, ok32,193,194
okText, ok8,193,194
okText =194,195
ok8 =196,197
ok16 =197,198
ok32 =198,199
ok64 =199,200
okWord =201,202
doConvert ::206,207
doConvert f211,212
incompatible ::214,215
incompatible f215,216
conversionFailed ::217,218
conversionFailed f218,219
atto ::220,221
atto types221,222

./Simple/QueryResults.hs,214
module Database.MySQL.Simple.QueryResults16,17
class QueryResults a70,71
    convertResults ::71,72
instance (Result77,78
convertError ::158,159
convertError fs159,160
ellipsis ::165,166
ellipsis bs166,167

./Simple/Param.hs,275
module Database.MySQL.Simple.Param13,14
data Action =46,47
    Plain Builder47,48
  | Escape ByteString52,53
  | Many [Action]56,57
instance Show60,61
class Param a66,67
    render ::67,68
renderNull ::96,97
renderNull =97,98
inQuotes ::196,197
inQuotes b197,198

./Simple.hs,1114
module Database.MySQL.Simple13,14
data FormatError =107,108
data FormatError = FormatError {107,108
      fmtMessage ::108,109
    , fmtQuery ::109,110
    , fmtParams ::110,111
data QueryError =117,118
data QueryError = QueryError {117,118
      qeMessage ::118,119
    , qeQuery ::119,120
formatQuery ::134,135
    | null xs && '?' `B.notElem` template =136,137
formatMany ::153,154
formatMany _154,155
buildQuery ::169,170
buildQuery conn170,171
execute ::188,189
execute conn189,190
execute_ ::194,195
execute_ conn195,196
executeMany ::205,206
executeMany _206,207
finishExecute ::211,212
finishExecute conn212,213
query ::234,235
query conn236,237
query_ ::241,242
query_ conn242,243
fold ::269,270
fold conn276,277
fold_ ::281,282
fold_ conn287,288
forEach ::292,293
forEach conn298,299
forEach_ ::302,303
forEach_ conn307,308
finishQuery ::310,311
finishQuery conn311,312
finishFold ::319,320
finishFold conn321,322
withResult ::328,329
withResult fetchResult329,330
withTransaction ::345,346
withTransaction conn346,347
fmtError ::352,353
fmtError msg353,354
